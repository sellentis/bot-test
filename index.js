const {MongoClient} = require('mongodb')
const fetch = require("node-fetch")
const TelegramApi = require('node-telegram-bot-api')

// const local = require('./local.json');

// const token = local.token

const client = new MongoClient('mongodb+srv://Sellentis:sellentis@sellentis-telegram-bot.9bhpv.mongodb.net/Sellentis-tg-bot?retryWrites=true&w=majority')

const token = "1806990129:AAFwG_rKrudokdZl5eQX7QcnlNN3771gQ8w"

const bot = new TelegramApi(token, {polling: true})

const API_WEATHER = "48364d8a9ecebac5c043e4c9f94d08d0"

const start = async () => {

	bot.setMyCommands([
		{command: '/info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'},
		{command: '/update', description: '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'},
		{command: '/weather', description: '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'}
	])

	bot.on('message', async msg => {

		const text = msg.text
		const chatId = msg.chat.id
		const username = msg.chat.username
		const firstName = msg.chat.first_name
		const lastName = msg.chat.last_name
		let today = new Date();
		let dd = String(today.getDate()).padStart(2, '0')
		let mm = String(today.getMonth() + 1).padStart(2, '0')
		let yyyy = today.getFullYear()
		today = mm + '/' + dd + '/' + yyyy;
		// console.log(msg)

		try {
			await client.connect()
			console.log("-----------–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ-----------")
		}
		catch (e) {
			console.log("-----------–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ-----------")
			return bot.sendMessage(chatId, `–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`)
		}

		if (text === '/start') {
			try {

				const users = client.db().collection('users')
				const chatIdDb = await users.findOne({id: chatId})
				if (chatIdDb) {

				}
				else {
					await users.insertOne({name: username, id: chatId, firstName: firstName,
						lastName: lastName,
						lastActivity: today})
				}
			}
			catch (e) {
				console.log(e)
			}
			if (username) {
				return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${username}`)
			}
			else {
				return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}`)
			}
		}
		if (text === '/update') {
			try {
				const users = client.db().collection('users')
				const chatIdDb = await users.findOne({id: chatId})

				if (chatIdDb) {
					await users.updateOne({id: chatId}, {$set: {
							name: username,
							firstName: firstName,
							lastName: lastName,
							lastActivity: today
					}})
				}
				return bot.sendMessage(chatId, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`)
			}
			catch (e) {
				return bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`)
			}
		}
		if (text === '/info') {
			return bot.sendMessage(chatId, `–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ–ª–ª–µ–Ω—Ç–∏—Å—Å`)
		}
		if (text === '/weather') {
			city = "Sloviansk,ua"
			const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_WEATHER}&units=metric`)
			const data = await api_url.json()
			let temp = data.main.temp
			let weather = data.weather[0].main
			let weatherSmile
			switch (weather) {
				case "Clouds":
					weatherSmile = "‚òÅÔ∏è"
					break;
				case "Clear":
					weatherSmile = "‚òÄÔ∏è"
					break;
				case "Rain":
					weatherSmile = "üåß"
					break;
				case "Snow":
					weatherSmile = "üå®"
					break;
			}
			return bot.sendMessage(chatId, `–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É –°–ª–∞–≤—è–Ω—Å–∫: ${Math.round(temp)} –≥—Ä–∞–¥—É—Å–∞ ${weatherSmile}`)
		}
		console.log(msg)
		return bot.sendMessage(chatId, `–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é`)
	})
}
start()